---
export interface Props {
  name?: string;
  alias?: string;
  title?: string;
  media?: string;
  actor?: string;
}

interface GetInfo {
  id: string;
  imageSrc: string;
  charName: string;
}

const { alias, name, title, media, actor } = Astro.props;

let transformName = (name: string): string => {
  return name.split(" ").join("-").toLowerCase();
};

let getImage = async (id: string) => {
  const images = await Astro.glob("../../public/images/*").then(files => {
  return files.map(file => file.default)
})

for (let image of images) {
  if (id +".jpg" === image.slice(15)) return "./images/" + id + ".jpg";
}

return "./images/placeholder.jpg";
}

let returnPayload = async (charName: string): Promise<GetInfo> => {
  let id = transformName(charName);
  let imageSrc =  await getImage(id);
  return { id, imageSrc, charName };
};

let GetInfo = async (): Promise<GetInfo> => {
  let id = "";
  let imageSrc = "";
  let charName = "";

  if (alias) {
    return await returnPayload(alias);
  }
  if (name) {
    return await returnPayload(name);
  }

  return { id, imageSrc, charName };
};

let { id, imageSrc, charName } = await GetInfo();


---

<img class="w-auto" src={imageSrc} id={id} />
<h3 class="text-lg">{charName} in {title}</h3>
<ul>
  <li class="text-sm">Media: {media}</li>
  <li class="text-sm">Portrayed by: {actor}</li>
</ul>
