---
interface Items {
	name: string;
    alias: string;
    title: string;
    media: string;
    actor: string; 
}

interface ListItems extends Items {
    imgSrc: string
    isSpoiler: boolean
}

import { idText } from 'typescript';
import Card from '../components/Card.astro';

const { items } = Astro.props;

const spoilerAlert = [
  'Aech',
  'Black Panther',
  'Steve',
  'Ramsey',
  'Latrell Walker'

]

const images = await Astro.glob("../../public/images/*").then(files => {
        return files.map(file => file.default)
})


const makeURLNameFriendly = (name: string): string => {
  return name.split(" ").join("-").toLowerCase();
};

const getImageURL = (item: Items) => {
    let fname

    if (item.alias) {
        fname = makeURLNameFriendly(item.alias);
    } else if (item.name) {
        fname = makeURLNameFriendly(item.name);
    }
  
    for (let image of images) {
        if (image.src.includes(fname)) return "./images/"+fname+".jpg";
    }

    return "./images/placeholder.jpg";;
};

let getItems = ( items:Items[] ):ListItems[] => {
    const ary: ListItems[] = [];
    let obj = {}

    items.forEach(  (item: Items) => {
        const imgSrc = getImageURL(item);
        let isSpoiled = false;


        spoilerAlert.forEach( (spoiled)=> {
            if (item.alias === spoiled || item.name === spoiled ) {
                isSpoiled = true
            }
        })

        obj = {
            ...item,
            imgSrc: imgSrc,
            isSpoiler: isSpoiled,
        }

        ary.push(obj as ListItems);


    });

    return ary
}

let cards = getItems(items);

---
<ul id="list">

    {cards.map( (card) => (
        <li class="mb-10">
            <Card {...card} />
        </li>
    ))}
</ul>